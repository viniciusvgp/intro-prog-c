# -*- mode: org -*-
# -*- coding: utf-8 -*-
#+STARTUP: overview
#+STARTUP: indent

#+TITLE:     Dicas sobre dúvidas e erros recorrentes no aprendizado da linguagem ~C~
#+AUTHOR:    Prof. Vinícius Garcia Pinto                                                                                                              
#+EMAIL:     vinicius.pinto@inf.ufrgs.br                                                                                                              
#+DATE:      2019/1

#+LANGUAGE: pt_BR
#+OPTIONS: creator:nil timestamp:nil skip:nil email:nil toc:nil num:t ^:nil ~:~ 
#+TAGS: noexport(n) deprecated(d) ignore(i)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+LATEX_HEADER: \usepackage[brazilian]{babel}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[T1]{fontenc}

# this should be in local variables, but it is not working yet
#+LATEX_HEADER: \usepackage{xcolor}

# No label in figures and tables (e.g. Figure 1. bla bla bla)
#+LATEX_HEADER: \usepackage[labelformat=empty]{caption}


Este documento reúne algumas dicas sobre dúvidas e erros recorrentes
no aprendizado da linguagem C. Antes de solicitar ajuda, recomenda-se
a consulta a esta lista a fim de verificar se o problema/dúvida não se
enquadra em um dos casos abaixo. Sugestões e correções são bem-vindas
pelo e-mail: vinicius.pinto@inf.ufrgs.br.

* Dicas gerais
:PROPERTIES:
  :unnumbered: t
  :END:

** Valores máximos e mínimos para variáveis
:PROPERTIES:
  :unnumbered: t
  :END:
Em alguns problemas é conveniente inicializar variáveis com o valor
mínimo ou com o valor máximo permitido para aquele tipo. Nestes casos,
podemos usar bibliotecas adicionais que definem constantes
representando estes valores de mínimo e máximo.

*** Variáveis do tipo ~int~                                          :ignore:
#+CAPTION: *Variáveis do tipo ~int~*
#+ATTR_LATEX: :options inputencoding=utf8, frame=single, showstringspaces=false, basicstyle=\ttfamily\footnotesize, keywordstyle=\bfseries\color{green!40!black}, commentstyle=\itshape\color{purple!40!black}, identifierstyle=\color{blue}, stringstyle=\color{orange}, extentedchars=true, literate={á}{{\'a}}1 {à}{{\`a}}1 {ã}{{\~a}}1 {é}{{\'e}}1 {ê}{{\^e}}1 {í}{{\'i}}1 {ó}{{\'o}}1 {õ}{{\~o}}1 {ú}{{\'u}}1 {ü}{{\"u}}1 {ç}{{\c{c}}}1
#+begin_src C :exports both :results output :eval no-export
#include<limits.h>

int varA = INT_MAX;
int varB = INT_MIN;

printf("varA contem o maior valor possivel (int): %d ", varA);
printf("\n");
printf("varB contem o menor valor possivel (int): %d ", varB);
printf("\n");
#+end_src

#+RESULTS:
: varA contem o maior valor possivel (int): 2147483647 
: varB contem o menor valor possivel (int): -2147483648


*** Variáveis do tipo ~float~                                        :ignore:
#+name: flt-max-min
#+CAPTION: *Variáveis do tipo ~float~*
#+ATTR_LATEX: :options frame=single, basicstyle=\ttfamily\scriptsize
#+begin_src C :exports both :results output code :wrap "SRC fundamental" :eval no-export
#include<float.h>

float varA = FLT_MAX;
float varB = FLT_MIN;

printf("varA contem o maior valor possivel (float): \n  %f ", varA);
printf("\n");
printf("varB contem o menor valor possivel (float): \n  %.60f", varB);
printf("\n");

printf("\nNotacao Exponencial: \n");
printf("varA contem o maior valor possivel (float): \n  %e ", varA);
printf("\n");
printf("varB contem o menor valor possivel (float): \n  %e ", varB);
printf("\n");
#+end_src

#+RESULTS: flt-max-min
: varA contem o maior valor possivel (float): 
:   340282346638528859811704183484516925440.000000 
: varB contem o menor valor possivel (float): 
:   0.000000000000000000000000000000000000011754943508222875079687
: 
: Notacao Exponencial: 
: varA contem o maior valor possivel (float): 
:   3.402823e+38 
: varB contem o menor valor possivel (float): 
:   1.175494e-38

** Leitura de variável do tipo ~char~
Ao fazer a leitura de uma variável do tipo ~char~, é conveniente
adicionar um espaço em branco antes do ~%c~. Dessa forma, evita-se a
interferência de outros possíveis caracteres remanescentes no /buffer/
de leitura, por exemplo: espaço, fim de linha ou tabulação. 

#+ATTR_LATEX: :options frame=single, basicstyle=\ttfamily\scriptsize
#+begin_src C :exports both :results output code :wrap "SRC fundamental" :eval no-export
char var;

do{
  
  printf("Olá! \n");
  
  printf("Digite \'s\' para repetir: ");
  scanf(" %c", &var);

}while(var == 's');

#+end_src

* Erros Recorrentes
:PROPERTIES:
  :unnumbered: t
  :END:

** Uso do ~&~ no ~scanf~
:PROPERTIES:
  :unnumbered: t
  :END:
Não esquecer de incluir o ~&~ antes do nome de variáveis escalares dos
tipos ~int~, ~float~, ~char~ e ~double~. Erros como o programa encerrar logo
após o usuário digitar algum valor frequentemente estão relacionados
ao esquecimento do ~&~ no ~scanf~.

*** Errado                                                         :ignore:
#+CAPTION: *Errado:*
#+ATTR_LATEX: :options inputencoding=utf8, frame=single, basicstyle=\ttfamily\small, keywordstyle=\bfseries\color{green!40!black}, commentstyle=\itshape\color{purple!40!black}, identifierstyle=\color{blue}, stringstyle=\color{orange}, extentedchars=true, literate={á}{{\'a}}1 {à}{{\`a}}1 {ã}{{\~a}}1 {é}{{\'e}}1 {ê}{{\^e}}1 {í}{{\'i}}1 {ó}{{\'o}}1 {õ}{{\~o}}1 {ú}{{\'u}}1 {ü}{{\"u}}1 {ç}{{\c{c}}}1
#+begin_src C :exports code :eval no-export
scanf("%d", var);
#+end_src

*** Correto                                                        :ignore:
#+CAPTION: *Correto:*
#+begin_src C :exports code :eval no-export
scanf("%d", &var);
#+end_src

** Uso de ~"~ no  ~printf~ e no ~scanf~ 
:PROPERTIES:
:unnumbered: t
:END:
Atenção ao uso de aspas (~"~) no ~printf~ e no ~scanf~. As aspas (~"~)
delimitam o primeiro parâmetro que é a /string/ com o formato. Logo, os
demais parâmetros fornecidos ao ~printf~ e ao ~scanf~, _*não devem*_ estar
entre as aspas (~"~) que delimitam o formato.

*** Errado                                                         :ignore:
#+CAPTION: *Errado:*
#+ATTR_LATEX: :options inputencoding=utf8, frame=single, basicstyle=\ttfamily\small, keywordstyle=\bfseries\color{green!40!black}, commentstyle=\itshape\color{purple!40!black}, identifierstyle=\color{blue}, stringstyle=\color{orange}, extentedchars=true, literate={á}{{\'a}}1 {à}{{\`a}}1 {ã}{{\~a}}1 {é}{{\'e}}1 {ê}{{\^e}}1 {í}{{\'i}}1 {ó}{{\'o}}1 {õ}{{\~o}}1 {ú}{{\'u}}1 {ü}{{\"u}}1 {ç}{{\c{c}}}1
#+begin_src C :exports code :eval no-export
int a, b = 1;

printf("%d \n, b");

printf("Digite o valor de a");
scanf("%d, &a");
#+end_src

*** Correto                                                        :ignore:
#+CAPTION: *Correto:*
#+begin_src C :exports code :eval no-export
int a, b = 1;

printf("%d \n", b);

printf("Digite o valor de a");
scanf("%d", &a);
#+end_src

** Formato no ~printf~ e no ~scanf~
:PROPERTIES:
  :unnumbered: t
  :END:
A formatação (exemplo: ~%d~, ~%f~, ~%lf~, etc) tem uso semelhante no ~printf~ e
no ~scanf~, entretanto, a especificação de limitadores como ~%.2f~ ou
~%4.3f~ é válida *somente* no ~printf~, não devendo ser usada com o comando
~scanf~.
#+Latex: \\

*** Errado                                                         :ignore:
#+CAPTION: *Errado:*
#+ATTR_LATEX: :options showstringspaces=false
#+begin_src C :exports code :eval no-export
float var1 = 4.2095, var2;
printf("Valor: %.2f \n", var1);
printf("Informe um valor real: ");
scanf("%.2f", &var2);
#+end_src

*** Correto                                                        :ignore:
#+CAPTION: *Correto:*
#+ATTR_LATEX: :options showstringspaces=false
#+begin_src C :exports code :eval no-export
float var1 = 4.2095, var2;
printf("Valor: %.2f \n", var1);
printf("Informe um valor real: ");
scanf("%f", &var2);
#+end_src

** Formato incompatível com o tipo da variável 
:PROPERTIES:
  :unnumbered: t
  :END:
Atenção para a utilização do formato correspondente ao tipo da
variável.

#+ATTR_LATEX: :align c|c
| *tipo*  | *exemplo de formato* |
|-------+--------------------|
| ~int~   | ~%d~                 |
| ~float~ | ~%f~                 |
| ~char~  | ~%c~                 |


*** Errado                                                         :ignore:
#+CAPTION: *Errado:*
#+ATTR_LATEX: :options showstringspaces=false
#+begin_src C :exports code :eval no-export
float var1 = 4.2095;
int var2 = 7;
printf("Valor 1: %d \n", var1);
printf("Valor 2: %d \n", var2);
#+end_src

*** Correto                                                        :ignore:
#+CAPTION: *Correto:*
#+ATTR_LATEX: :options showstringspaces=false
#+begin_src C :exports code :eval no-export
float var1 = 4.2095;
int var2 = 7;
printf("Valor 1: %f \n", var1);
printf("Valor 2: %d \n", var2);
#+end_src

** Uso de ~;~ em ~if-else~
:PROPERTIES:
  :unnumbered: t
  :END:
Atenção em comandos ~if~ e ~else~, *não* deve ser colocado ~;~ no final da
linha. Lembre-se também que blocos compostos por mais de uma linha de
código devem ser delimitados por ~{~ e ~}~.
#+Latex: \\

*** Errado                                                         :ignore:
#+CAPTION: *Errado:*
#+ATTR_LATEX: :options showstringspaces=false
#+begin_src C :exports code :eval no-export
if(a >= 0);
  printf("a é positivo \n");
else;
  printf("a é negativo \n");
#+end_src

*** Correto                                                        :ignore:
#+CAPTION: *Correto:*
#+ATTR_LATEX: :options showstringspaces=false
#+begin_src C :exports code :eval no-export
if(a >= 0)
  printf("a é positivo \n");
else
  printf("a é negativo \n");
#+end_src

** Inicialização de variáveis 
:PROPERTIES:
  :unnumbered: t
  :END:
As variáveis devem ser inicializadas antes de utilizá-las.

*** Errado                                                         :ignore:
#+CAPTION: *Errado:*
#+begin_src C :exports code :eval no-export
int soma, x, y;

soma = x + y;
printf("Resultado: %d", soma);
#+end_src

*** Correto                                                        :ignore:
#+CAPTION: *Correto:*
#+ATTR_LATEX: :options showstringspaces=false
#+begin_src C :exports code :eval no-export
int soma, x, y;

x = 10;

printf("Digite o valor de y: ");
scanf("%d", &y);

soma = x + y;
printf("Resultado: %d", soma);
#+end_src

** Comparações de Igualdade
:PROPERTIES:
  :unnumbered: t
  :END:
Ao fazer comparações de igualdade utiliza-se ~==~. O ~=~ serve para
atribuição, e usá-lo em comparações fará com que o programa não
execute de maneira adequada. Atenção: este tipo de equívoco não gera
um erro durante a compilação.

*** Errado                                                         :ignore:
#+CAPTION: *Errado*
#+begin_src C :exports code :eval no-export
int a = 7;

if( a = 0 ){
  printf("A vale zero.");
}
#+end_src

*** Correto                                                        :ignore:
#+CAPTION: *Correto*
#+ATTR_LATEX: :options showstringspaces=false
#+begin_src C :exports code :eval no-export
int a = 7;

if( a == 0 ){
  printf("A vale zero.");
}
#+end_src


** Atribuição vs Comparação de Igualdade
De maneira análoga, ao fazer atribuições utiliza-se ~=~, devendo o ~==~
ser utilizado apenas em comparações. Atenção: este tipo de equívoco
não gera um erro durante a compilação.

*** Errado                                                         :ignore:
#+CAPTION: *Errado*
#+begin_src C :exports code :eval no-export
int b;
b == 7;

printf("Valor de b: %d", b);
#+end_src

*** Correto                                                        :ignore:
#+CAPTION: *Correto*
#+ATTR_LATEX: :options showstringspaces=false
#+begin_src C :exports code :eval no-export
int b;
b = 7;

printf("Valor de b: %d", b);
#+end_src


** Laço infinito
Laços ~for~, ~while~ ou ~do-while~ que não terminam frequentemente estão
relacionados ao esquecimento da inclusão da atualização da variável de
controle ou a um erro na lógica de comparação/atualização.

*** Problemas na atualização da variável de controle
**** Errado                                                       :ignore:
#+CAPTION: *Errado*
#+begin_src C :exports code :eval no-export
int var = 0;

while(var < 10){
  printf("%d \n", var);
}
#+end_src

**** Correto                                                      :ignore:
#+CAPTION: *Correto*
#+begin_src C :exports code :eval no-export
int var = 0;

while(var < 10){
  printf("%d \n", var);
  var++;
}
#+end_src

*** Problema na lógica de comparação/atualização
**** Errado                                                       :ignore:
#+CAPTION: *Errado*
#+begin_src C :exports code :eval no-export
int cont = 15;
int total = 0;

while(cont > 0){
  total+= cont;
  cont++;
}

printf("%d \n", total);
#+end_src

**** Correto                                                      :ignore:
#+CAPTION: *Correto*
#+begin_src C :exports code :eval no-export
int cont = 15;
int total = 0;

while(cont > 0){
  total+= cont;
  cont--;
}

printf("%d \n", total);
#+end_src

** Separação dos componentes do laço ~for~
Em laços ~for~, a separação entre os componentes inicialização, condição
e incremento/passo é feita com o caractere ~;~. 

*** Errado                                                         :ignore:
#+CAPTION: *Errado*
#+begin_src C :exports code :eval no-export
for(int i = 0, i < 10, i++){
    printf("%d", i);
}
#+end_src

*** Correto                                                        :ignore:
#+CAPTION: *Correto*
#+ATTR_LATEX: :options showstringspaces=false
#+begin_src C :exports code :eval no-export
for(int i = 0; i < 10; i++){
    printf("%d", i);
}
#+end_src

* Local variables                                                  :noexport:
# Local Variables:
# eval: (setq org-latex-listings t)
# eval: (setq org-latex-packages-alist '(("" "xcolor")))
# eval: (setq org-latex-packages-alist '(("" "listings")))
# eval: (setq org-latex-packages-alist '(("" "listingsutf8")))
# eval: (setq ispell-local-dictionary "brasileiro")
# eval: (flyspell-mode t)
# eval: (require 'ox-extra)
# eval: (ox-extras-activate '(ignore-headlines))
# End:

#+begin_src emacs-lisp :results output :exports both
(setq org-latex-listings t)
(setq org-latex-packages-alist '(("" "xcolor")))
(setq org-latex-packages-alist '(("" "listings")))
(setq org-latex-packages-alist '(("" "listingsutf8")))
(setq org-latex-caption-above t)
#+end_src

#+RESULTS:



